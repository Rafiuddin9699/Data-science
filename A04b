{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9ed970f3-7169-4452-a1ab-b35c78e3559c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Car\n",
      "200\n",
      "30\n"
     ]
    }
   ],
   "source": [
    "'''Q1, Create a vehicle class with an init method having instance variables as name_of_vehicle, max_speed\n",
    "and average_of_vehicle.\n",
    "A1. '''\n",
    "\n",
    "class Vehicle:\n",
    "    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "\n",
    "# Example usage:\n",
    "vehicle1 = Vehicle(\"Car\", 200, 30)\n",
    "print(vehicle1.name_of_vehicle)      # Output: Car\n",
    "print(vehicle1.max_speed)            # Output: 200\n",
    "print(vehicle1.average_of_vehicle)   # Output: 30\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fbd2761-4d9c-4dd8-94c2-2f6928e0ed1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Q2. Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.\n",
    "Create a method named seating_capacity which takes capacity as an argument and returns the name of\n",
    "the vehicle and its seating capacity.\n",
    "A2. '''\n",
    "class Vehicle:\n",
    "    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "\n",
    "class Car(Vehicle):\n",
    "    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):\n",
    "        super().__init__(name_of_vehicle, max_speed, average_of_vehicle)\n",
    "\n",
    "    def seating_capacity(self, capacity):\n",
    "        return f\"The {self.name_of_vehicle} has a seating capacity of {capacity}.\"\n",
    "\n",
    "# Example usage:\n",
    "car1 = Car(\"Toyota\", 180, 25)\n",
    "print(car1.name_of_vehicle)            # Output: Toyota\n",
    "print(car1.max_speed)                  # Output: 180\n",
    "print(car1.average_of_vehicle)         # Output: 25\n",
    "print(car1.seating_capacity(5))        # Output: The Toyota has a seating capacity of 5.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6109de9d-79fe-42b7-8cba-7c031729a363",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Q3. What is multiple inheritance? Write a python code to demonstrate multiple inheritance.\n",
    "A3.'''\n",
    "# Define superclass A\n",
    "class A:\n",
    "    def method_A(self):\n",
    "        print(\"Method from class A\")\n",
    "\n",
    "# Define superclass B\n",
    "class B:\n",
    "    def method_B(self):\n",
    "        print(\"Method from class B\")\n",
    "\n",
    "# Define subclass C inheriting from A and B\n",
    "class C(A, B):\n",
    "    def method_C(self):\n",
    "        print(\"Method from class C\")\n",
    "\n",
    "# Create an instance of class C\n",
    "obj = C()\n",
    "\n",
    "# Call methods from both A and B through obj\n",
    "obj.method_A()  # Output: Method from class A\n",
    "obj.method_B()  # Output: Method from class B\n",
    "obj.method_C()  # Output: Method from class C\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03e5c48d-1a96-46bd-84bb-4a506a70c3ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Q4. What are getter and setter in python? Create a class and create a getter and a setter method in this\n",
    "class.\n",
    "A4.  In Python, getter and setter methods are used to control access to attributes of a class. Getter methods are used to retrieve the value of an attribute, while setter methods are used to set or modify the value of an attribute. They provide encapsulation and help in maintaining the integrity of data by allowing controlled access to class attributes.'''\n",
    "class Student:\n",
    "    def __init__(self, name, age):\n",
    "        self._name = name  # Attribute with underscore prefix indicating it's a protected attribute\n",
    "        self._age = age    # Attribute with underscore prefix indicating it's a protected attribute\n",
    "\n",
    "    # Getter method to retrieve the value of the name attribute\n",
    "    def get_name(self):\n",
    "        return self._name\n",
    "\n",
    "    # Setter method to set or modify the value of the name attribute\n",
    "    def set_name(self, name):\n",
    "        self._name = name\n",
    "\n",
    "    # Getter method to retrieve the value of the age attribute\n",
    "    def get_age(self):\n",
    "        return self._age\n",
    "\n",
    "    # Setter method to set or modify the value of the age attribute\n",
    "    def set_age(self, age):\n",
    "        if age >= 0:\n",
    "            self._age = age\n",
    "        else:\n",
    "            print(\"Age cannot be negative.\")\n",
    "\n",
    "# Create an instance of the Student class\n",
    "student1 = Student(\"Alice\", 20)\n",
    "\n",
    "# Get and print the current values of attributes using getter methods\n",
    "print(\"Name:\", student1.get_name())  # Output: Name: Alice\n",
    "print(\"Age:\", student1.get_age())    # Output: Age: 20\n",
    "\n",
    "# Set new values to attributes using setter methods\n",
    "student1.set_name(\"Bob\")\n",
    "student1.set_age(25)\n",
    "\n",
    "# Get and print the updated values of attributes using getter methods\n",
    "print(\"Name:\", student1.get_name())  # Output: Name: Bob\n",
    "print(\"Age:\", student1.get_age())    # Output: Age: 25\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c82546b2-22e6-4331-9ab8-6c470fac759c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
